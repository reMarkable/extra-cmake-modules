#=============================================================================
# SPDX-FileCopyrightText: 2021 Frederik Gladhorn <frederik.gladhorn@remarkable.com>
# SPDX-FileCopyrightText: Based on version file generated by CMake
#
# SPDX-License-Identifier: BSD-3-Clause
#=============================================================================

# Expect three digits as version
set(ECM_VERSION_REGEX "^set\\(VERSION *\"([0-9]+\\.[0-9]+\\.[0-9]+)\"\\).*$")
# Parse version line from CMakeLists.txt
file(STRINGS ${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt PACKAGE_VERSION_LINE REGEX ${ECM_VERSION_REGEX})
# Extract version number from line to set PACKAGE_VERSION
string(REGEX REPLACE ${ECM_VERSION_REGEX} "\\1" PACKAGE_VERSION ${PACKAGE_VERSION_LINE})

# The rest of this file is generated
if (PACKAGE_FIND_VERSION_RANGE)
  # Package version must be in the requested version range
  if ((PACKAGE_FIND_VERSION_RANGE_MIN STREQUAL "INCLUDE" AND PACKAGE_VERSION VERSION_LESS PACKAGE_FIND_VERSION_MIN)
      OR ((PACKAGE_FIND_VERSION_RANGE_MAX STREQUAL "INCLUDE" AND PACKAGE_VERSION VERSION_GREATER PACKAGE_FIND_VERSION_MAX)
        OR (PACKAGE_FIND_VERSION_RANGE_MAX STREQUAL "EXCLUDE" AND PACKAGE_VERSION VERSION_GREATER_EQUAL PACKAGE_FIND_VERSION_MAX)))
    set(PACKAGE_VERSION_COMPATIBLE FALSE)
  else()
    set(PACKAGE_VERSION_COMPATIBLE TRUE)
  endif()
else()
  if(PACKAGE_VERSION VERSION_LESS PACKAGE_FIND_VERSION)
    set(PACKAGE_VERSION_COMPATIBLE FALSE)
  else()
    set(PACKAGE_VERSION_COMPATIBLE TRUE)
    if(PACKAGE_FIND_VERSION STREQUAL PACKAGE_VERSION)
      set(PACKAGE_VERSION_EXACT TRUE)
    endif()
  endif()
endif()


# if the installed project requested no architecture check, don't perform the check
if("FALSE")
  return()
endif()

# if the installed or the using project don't have CMAKE_SIZEOF_VOID_P set, ignore it:
if("${CMAKE_SIZEOF_VOID_P}" STREQUAL "" OR "" STREQUAL "")
  return()
endif()

# check that the installed version has the same 32/64bit-ness as the one which is currently searching:
if(NOT CMAKE_SIZEOF_VOID_P STREQUAL "")
  math(EXPR installedBits " * 8")
  set(PACKAGE_VERSION "${PACKAGE_VERSION} (${installedBits}bit)")
  set(PACKAGE_VERSION_UNSUITABLE TRUE)
endif()
